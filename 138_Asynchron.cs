//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace HomeUnity
//{
//    class _138_Asynchron
//    {
//    }
//}


//// 동기프로그래밍
//// 프로그램 실행 도중 어떤 작업을 요청하면
//// 그 작업이 종료될 떄까지 기다렸다가 다음 작업을 실행
//// 동기프로그래밍은 요청과 결과가 동시에 일어남
//// 설계가 매우 간단하고 직관적
//// 대신 작업이 완료될 때까지 기다려야함

//// 비동기 프로그래밍
//// 프로그램 실행 도중 어떤 작업 요청 후 결과를 기다리지 않고 다음 작업 실행
//// 설계단계에서 동기보다 복잡하며 요청 작업이 완료 될때를 별도로 확인 해야함
//// 요청작업이 오래걸려도 다른작업을 할 수 있으며 효율적으로 자원 사용 가능


//// 프로세스 //ctrl+alt+delete눌러서 확인가능
//// 메모리에 올라와 실행되고 있는 프로그램의 인스턴스
//// 운영체제로부터 시스템 자원을 할당받는 작업의 단위
//// 동적인 개념으로는 실행된 프로그램을 의미
//// 1개의 프로그램당 최소 1개의 스레드(작업자)를 가지고 있다.

////스레드(작업자로 보면됨)
//// 프로세스 내 실행되고 있는 여러 흐름의 단위
//// 프로세스 할당받은 자원을 이용하는 실행의 단위

//// 멀티 프로세스
//// 하나의 응용프로그램을 여러개의 프로세스로 구성해 각 프로세스가 하나의 작업을 처리
//// 장점 : 여러개의 프로세스 중 하나의 프로세스가 문제가 발생해도
////          다른 프로세스로 문제가 확산이 되지 않음
//// 단점 : 캐쉬메모리 초기화 등 무거운 작업이 진행되며 오버헤드가 발생될 수 있음

//// 멀티 스레드
//// 하나의 응용프로그램이 여러개의 스레드로 구성되어 하나의 작업을 처리
//// 장점1 : 시스템 자원 소모 감소(자원의 효율성 증대)
//// 장점2 : 시스템 처치량 증가(처리 비용 감소)
//// 단점1 : 주의 깊은 설계가 필요
//// 단점2 : 자원 공유의 문제
